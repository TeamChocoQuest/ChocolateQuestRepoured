plugins {
    id 'eclipse'
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
}

version = "${mc_version}-${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
    includedDependencies
    atDependencies
    buildDependencies

    implementation.extendsFrom(includedDependencies)
    implementation.extendsFrom(atDependencies)
}

repositories {
    // Github Releases
    ivy {
        url 'https://github.com'

        patternLayout {
            artifact '[organisation]/[module]/releases/download/v[revision]/[module]-[revision].[ext]'
        }

        metadataSources { artifact() } 
    }

    // CurseForge
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    includedDependencies 'meldexun:ASMUtil:2.7.3@jar'
    includedDependencies 'meldexun:ReflectionUtil:1.0.0@jar'

    atDependencies fg.deobf('curse.maven:geckolib-388172:4020277')
    atDependencies fg.deobf('curse.maven:reach-fix-556777:6218135')
    atDependencies fg.deobf('curse.maven:jei-238222:5101347')

    buildDependencies 'curse.maven:AncientWarfare2-224602:3293318'
    buildDependencies 'curse.maven:CodeChickenLib-242818:2779848'
    buildDependencies 'curse.maven:CubicChunks-292243:3186888'
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer = files(
        'src/main/resources/META-INF/accesstransformer.cfg',
        files(configurations.atDependencies.collect { zipTree(it) }).getAsFileTree().matching {
            include 'META-INF/geckolib_at.cfg'
            include 'META-INF/accesstransformer.cfg'
            include 'META-INF/jei_at.cfg'
        }
    )

    runs {
        client {
            taskName "runClient ${mod_name} ${mc_version}"
            environment 'MC_VERSION', "${mc_version}"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'fml.coreMods.load', "${mod_plugin_class},${dependency_plugin_classes}"
        }

        server {
            taskName "runServer ${mod_name} ${mc_version}"
            environment 'MC_VERSION', "${mc_version}"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'fml.coreMods.load', "${mod_plugin_class},${dependency_plugin_classes}"
        }
    }
}

processResources {
    inputs.property('version', "${mod_version}")

    filesMatching('mcmod.info') {
        expand version: inputs.properties.get('version')
    }
}

jar {
    from {
        configurations.includedDependencies.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes 'FMLAT': 'accesstransformer.cfg'
        attributes 'FMLCorePlugin': "${mod_plugin_class}"
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

jar.finalizedBy('reobfJar')

compileJava {
    classpath = sourceSets.main.compileClasspath + configurations.buildDependencies
}
